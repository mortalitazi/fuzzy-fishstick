extends Control
# BASIC GAMEPLAY TRIAL RUN
# PLAY ROUND, WIN, REPEAT
# TESTS HAND ANALYSIS, CALCULATIONS, LOOPS

# UI
@onready var displayed_message = $WINDOW/TERMINAL
@onready var user_input = $WINDOW/COMMANDLINE
@onready var submit_button = $WINDOW/SUBMIT

# GAME LEVEL VARIABLES
var game_state = GameState.GETUSERNAME # STORES GAMESTATE FOR LOOP
var waiting = false # USED TO WAIT FOR PLAYER INPUT
var prompt = null # USED BY PROCESS INPUT FOR PASSING INPUT SHORTS
var deck = [] # THE PLAYER'S DECK OF CARDS; ARRAY OF CARD DICTIONARIES
var cards = {} # GLOBAL DICTIONARY OF ALL CARDS

	# PLAYER SPECIFIC
var username = null # SET USERNAME IN GAME START
var player_hand_size = 8 # HOW MANY CARDS TO DRAW TO HAND
var credits = 0 # PLAYERS STARTS WITH NOTHING IN ACCOUNT

		# DATABASE: INCLUDED FOR TESTING
var player_daemons = [] # DAEMONS IN DATABASE
var player_spiders = [] # SPIDERS IN DATABASE

	# SCALING VARIABLES
var round_number = 1 # ROUND NUMBER COUNT FOR SCALING
var boss_number = 0 # NUMBER OF BOSSES BEATEN FOR SCALING

	# ROUND SPECIFIC
var discard_pile = [] # RESETS AT END OF ROUND
var player_hand = [] # UNSORTED PLAYER HAND
var displayed_hand = [] # SORTED HAND THAT IS DISPLAYED
var selected_cards = [] # CARDS PLAYER SELECTS WITH PLAY/DISCARD/DAEMON
var scored_cards = [] # ONLY STORES CARDS THAT WERE SCORED AFTER PLAY
var score = 0 # ROUND SCORE
var hands = 4 # DEFAULT AMOUNT OF HANDS PER ROUND
var discards = 2 # DEFAULT AMOUNT OF DISCARDS PER ROUND

	# COMMAND SPECIFIC
var use_short_suits = true # FOR SHORTENING DISPLAYED NAMES OF CARDS

		# COMMAND DICTIONARY
var commands = {
	"help": "displays this help menu. \n",
	"play [card number(s)]": "plays selected card(s) for scoring, up to five. format like: [play 1 2 3]. \n",
	"discard [card number(s)]": "discards selected card(s), up to five. format like: [discard 4 5 6]. \n",
	"deck": "displays what cards are currently in your deck, if any. \n",
	"discard pile": "displays what cards are currently in your discard pile, if any. \n",
	"hand": "displays your currently drawn hand, if any. can also use 'h'\n",
	"database": "displays the daemons and spiders in your database, if any. \n",
	"credits": "displays your credits amount. \n",
	"set short": "shortens suit and rank names for all cards. example: 9 of Odessa becomes 9O. \n",
	"set long": "lengthens suit and rank names for all cards. example: 6B becomes 6 of Baezel. \n"
}

# ROUND REWARDS
var round_rewards = {
	[0, 1]: 50,
	[0, 2]: 75,
	[0, 3]: 100,
	[1, 4]: 125,
	# ... etc.
}

# BOSS DATA
var boss_data = {
	0: {"multiplier": 1.5, "name": "Weak Boss"},  # Example
	1: {"multiplier": 2.0, "name": "Medium Boss"},
	2: {"multiplier": 3.0, "name": "Strong Boss"},
	# ... Add more bosses as needed
}

# ENUMS
enum GameState { # TRACKS GAMESTATE IN GAMELOOP
	START,
	GETUSERNAME,
	PLAYING,
	WIN,
	LOSE,
	END
}

enum HandType {
	ROYAL_FLUSH,
	STRAIGHT_FLUSH,
	FIVE_OF_A_KIND,
	FLUSH_FIVE,
	FOUR_OF_A_KIND,
	FLUSH_FOUR,
	FULL_HOUSE,
	FLUSH_HOUSE,
	BAEZELS_HOUSE,
	ODESSAS_HOUSE,
	GODRIKS_HOUSE,
	THE_THREE,
	THREE_OF_A_KIND,
	TWO_PAIR,
	PAIR,
	FLUSH,
	STRAIGHT,
	HIGH_CARD,
}

var hand_data = {
	HandType.ROYAL_FLUSH: {
		"name" : "Royal Flush",
		"description" : "Royal Flush: A straight of all the same suit consisting of a Paladin, a King, a Queen, a Templar, and a ten.",
		"level" : 1,
		"base score" : 1000,
		"times played": 0
	},
	HandType.STRAIGHT_FLUSH: {
		"name" : "Straight Flush",
		"description" : "Straight Flush: A straight of any but royal of all the same suit.",
		"level" : 1,
		"base score" : 800,
		"times played": 0
	},
	HandType.FIVE_OF_A_KIND: {
		"name" : "Five of a Kind",
		"description" : "Five of a Kind: Five cards of the same rank.",
		"level" : 1,
		"base score" : 700,
		"times played": 0
	},
	HandType.FLUSH_FIVE: {
		"name" : "Flush Five",
		"description" : "Flush Five: Five cards of the same rank and suit.",
		"level" : 1,
		"base score" : 750,
		"times played": 0
	},
	HandType.FOUR_OF_A_KIND: {
		"name" : "Four of a Kind",
		"description" : "Four of a Kind: Four cards of the same rank.",
		"level" : 1,
		"base score" : 600,
		"times played": 0
	},
	HandType.FLUSH_FOUR: {
		"name" : "Flush Four",
		"description" : "Flush Four: Four cards of the same rank and suit",
		"level" : 1,
		"base score" : 650,
		"times played": 0
	},
	HandType.FULL_HOUSE: {
		"name" : "Full House",
		"description" : "Full House: A hand consisting of one Two Pair and one Three of a Kind.",
		"level" : 1,
		"base score" : 350,
		"times played": 0
	},
	HandType.FLUSH_HOUSE: {
		"name" : "Flush House",
		"description" : "Flush House: A Full House of all the same suit.",
		"level" : 1,
		"base score" : 400,
		"times played": 0
	},
	HandType.BAEZELS_HOUSE: {
		"name" : "Baezel's House",
		"description" : "Baezel's House: A Flush House consisting only of Baezel's suit.",
		"level" : 1,
		"base score" : 450,
		"times played": 0
	},
	HandType.ODESSAS_HOUSE: {
		"name" : "Odessa's House",
		"description" : "Odessa's House: A Flush House consisting only of Odessa's suit.",
		"level" : 1,
		"base score" : 450,
		"times played": 0
	},
	HandType.GODRIKS_HOUSE: {
		"name" : "Godrik's House",
		"description" : "Godrik's House: A Flush House consisting only of Godrink's suit.",
		"level" : 1,
		"base score" : 450,
		"times played": 0
	},
	HandType.THE_THREE: {
		"name" : "The Three",
		"description" : "The Three: A Three of a Kind of Paladins, one from each of the Dragon Gods: Baezel, Godrik, and Odessa.",
		"level" : 1,
		"base score" : 4000,
		"times played": 0
	},
	HandType.THREE_OF_A_KIND: {
		"name" : "Three of a Kind",
		"description" : "Three of a Kind: Three cards of the same rank.",
		"level" : 1,
		"base score" : 200,
		"times played": 0
	},
	HandType.TWO_PAIR: {
		"name" : "Two Pair",
		"description" : "Two Pair: Two sets of pairs.",
		"level" : 1,
		"base score" : 100,
		"times played": 0
	},
	HandType.PAIR: {
		"name" : "Pair",
		"description" : "Pair: Two cards of the same rank.",
		"level" : 1,
		"base score" : 50,
		"times played": 0
	},
	HandType.FLUSH: {
		"name" : "Flush",
		"description" : "Flush: Five cards of the same suit.",
		"level" : 1,
		"base score" : 150,
		"times played": 0
	},
	HandType.STRAIGHT: {
		"name" : "Straight",
		"description" : "Straight: A full hand of cards in sequential order.",
		"level" : 1,
		"base score" : 120,
		"times played": 0
	},
	HandType.HIGH_CARD: {
		"name" : "High Card",
		"description" : "High Card: A single card.",
		"level" : 1,
		"base score" : 20,
		"times played": 0
	}
}

	# FOR DECK OF CARDS
enum CardSuit { BAEZEL, GODRIK, ODESSA, DRAGONS } 
enum CardRank { TWO = 2, THREE = 3, FOUR = 4, FIVE= 5, SIX = 6, SEVEN = 7, EIGHT = 8, NINE = 9, TEN = 10, TEMPLAR = 11, QUEEN = 12, KING = 13, PALADIN = 14 }

# BASIC GAME LOOP FUNCS
func _ready() -> void:
	randomize()
	setup_deck()
	print("INITIAL DECK: ", deck) # FOR TESTING ONLY
	start_game()
	game_loop()
	
func _process(delta: float) -> void:
	pass
	
func game_loop():
	while game_state == GameState.PLAYING:
		on_hand_played()
		
func _on_submit_pressed() -> void:
	#if waiting:  # Only process if we're actually waiting for input
		prompt = user_input.text
		display_message(">> " + user_input.text + "\n")
		process_command(user_input.text)
		
		print("on_submit_pressed")
		print(prompt)
		user_input.clear() #clear the input
		
	# SPECIFIC COMMAND PROCESSING
func process_command(command: String):
	var parts = command.split(" ", true, 1) # LIMITS TO TWO PARTS
	
	if parts.size() > 0: 
		var command_word = parts[0].to_lower() # LOWERCASE
		
		if game_state == GameState.GETUSERNAME: #username input
			if command.length() < 20: #check length
				username = command
				display_message("Welcome " + username + ". \n")
				display_message("If you would like to see a list of commands, type 'help.' \n")
				game_state = GameState.PLAYING
				print("username: " + username)
				play_round()

	# SHORT OR LONG SUIT & RANK NAMES
		if command_word == "set" and parts.size() > 2:
			if parts[1] == "suit":
				if parts[2] == "short":
					use_short_suits = true
					# NO ACTUAL FUNCS FOR THIS: FIX
					display_message("Suit names will now be displayed in short form.")
				elif parts[2] == "long":
					use_short_suits = false
					display_message("Suit names will now be displayed in long form.")
				else:
					display_message("Invalid command.  Use 'set short' or 'set long'. \n")
			
	# PLAY CARD COMMAND
		elif command_word == "play" and parts.size() > 1:
			var card_numbers = parts[1].split(" ", false)
			play_cards(card_numbers)
			
	# DISCARD CARD COMMAND
		elif command_word == "discard" and parts.size() > 1:
			var card_numbers = parts[1].split(" ", false)
			discard_cards(card_numbers)
			
	# DISPLAY HAND
		elif command_word == "hand" or command_word == "h":
			display_hand()
			
	# SORT HAND BY SUIT OR SUIT
		elif command_word == "sort" and parts.size() > 1:
			if parts[1] == "rank":
				sort_hand_by_rank(player_hand)
				generate_displayed_hand()
				display_hand()
				
			elif parts[1] == "suit":
				sort_hand_by_suit(player_hand)
				generate_displayed_hand()
				display_hand()
				
	#DISPLAY DECK
		elif command_word == "deck" or command_word == "d":
			display_deck()
			
	# DISPLAY DISCARD PILE
		elif command_word == "discard" and parts.size() == 1:
			display_discard_pile()
			
	# DISPLAY HELP
		elif command_word == "help":
			display_help()
			
	# YES AND NO
		elif command_word == "yes":
			prompt = "yes"
			
		elif command_word == "no":
			prompt = "no"
			

func start_game():
	setup_deck()
	display_message("Welcome to /execute_duel. \n")
	display_message("Please sign in to the SSNN with your username: \n")
	  # Wait for username input
	game_state = GameState.GETUSERNAME
	set_process(true) #enable processing

func play_round():
	# CALC SCORE BASED ON SCALING
	var score_to_beat = calculate_score_scaling()
	# RESET DISCARD PILE FOR SECURITY
	reset_discard_pile()
	
	# BASIC SETUP
	score = 0
	
	shuffle_deck()
	deal_hand(8)
	generate_displayed_hand()
	display_hand()
	# MESSAGES TO PLAYER ON BASIC INFO
	display_message("Score at least " + str(score_to_beat) + " points to win. \n")
	display_message("You have " + str(hands) + " hands and " + str(discards) + " discards remaining. \n")
	# WAIT FOR INPUT
	
	
	
func on_hand_played():
	var score_to_beat = calculate_score_scaling()
	# DETERMINE IF PLAYER WINS, LOSES, OR CAN KEEP GOING
	if prompt == "handplayed":
		#calc score remaining to win and etc
		if score_to_beat <= score:
			prompt = null
			round_number += 1
			game_state = GameState.WIN
		elif hands > 0:
			var remaining_score = score_to_beat - score
			prompt = null
			round_number += 1
			display_message("Hand Score: " + str(score))
			display_message("Score at least " + str(score_to_beat) + " points to win. \n")
			display_message("You have " + str(remaining_score) + " left to score in order to win. \n")
		else:
			display_message("No hands remaining! \n")
			display_message("Feel free to try again. \n")
			prompt = null
			round_number = 1
			game_state = GameState.LOSE
	else:
		return
			
func handle_win():
	# SHUFFLE CARDS BACK INTO DECK
	for card in discard_pile:
		deck.append(card)
	reset_discard_pile()
	
	# CREDITS REWARDED
	var rewarded_creds = calc_round_reward()
	credits += rewarded_creds
	display_message("Good job " + str(username) + "! \n")
	display_message("You've earned " + str(rewarded_creds) + "credits for your win! \n")
	display_message("You have " + str(credits) + " credits total. \n")
	# MOVE IMMEDIATELY TO NEXT ROUND (TESTING)
	display_message("Connecting you to next round now...")
	game_state = GameState.PLAYING
	
func handle_lose():
	display_message("You tried your best, " + str(username) + " but it wasn't enough. \n")
	display_message("Let's try again, from the top. \n")
	game_state = GameState.START
	
# DECK FUNCTIONS
func setup_deck():
	# ONLY AT START OF GAME
	# CLEAR DECK AND CARDS
	deck.clear()
	cards.clear()
	# EACH DECK STARTS WITH FOUR EQUAL SUITS
	var suits = ["odessa", "godrik", "dragons", "baezel"]
	var ranks = [CardRank.TWO, CardRank.THREE, CardRank.FOUR, CardRank.FIVE, CardRank.SIX,
				 CardRank.SEVEN, CardRank.EIGHT, CardRank.NINE, CardRank.TEN,
				 CardRank.TEMPLAR, CardRank.QUEEN, CardRank.KING, CardRank.PALADIN]
	# FOR HAND ANALYSIS:
	#var rank_values = { "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9, "10": 10, "Templar": 11, "Queen":12, "King":13, "Paladin":14 }
	# BASE CHIPS ADDED TO HAND-TYPE SCORE ON PLAY
	#var chip_values = { "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9, "10": 10, "Templar": 11, "Queen":12, "King":13, "Paladin":14 }
	# BASE MULT USED IN HAND CALCULATION
	# SET TO 1 FOR STANDARD STARTING DECK
	#var mult_values = { "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "Templar": 1, "Queen":1, "King":1, "Paladin":1 }
	# ACTUALLY MAKING THE DECK; POPULATES THE DECK ARRAY
	for suit_str in suits:
		for rank_enum in ranks:
			var suit_short = "O" # DEFAULT; USED FOR SHORT COMMAND
			var enum_suit = CardSuit.ODESSA # DEFAULT
			
			# CONVERT SUIT STRING TO ENUM VALUE
			if suit_str == "odessa":
				enum_suit = CardSuit.ODESSA
				suit_short = "O"
			elif suit_str == "godrik":
				enum_suit = CardSuit.GODRIK
				suit_short = "G"
			elif suit_str == "baezel":
				enum_suit = CardSuit.BAEZEL
				suit_short = "B"
			elif suit_str == "dragons":
				enum_suit = CardSuit.DRAGONS
				suit_short = "D"
			else:
				push_warning("setup_deck ERROR: SUIT NAME UNKNOWN. \n")
			
			var rank_str = ""
			match rank_enum:
				CardRank.TWO: rank_str = "2"
				CardRank.THREE: rank_str = "3"
				CardRank.FOUR: rank_str = "4"
				CardRank.FIVE: rank_str = "5"
				CardRank.SIX: rank_str = "6"
				CardRank.SEVEN: rank_str = "7"
				CardRank.EIGHT: rank_str = "8"
				CardRank.NINE: rank_str = "9"
				CardRank.TEN: rank_str = "10"
				CardRank.TEMPLAR: rank_str = "templar"
				CardRank.QUEEN: rank_str = "queen"
				CardRank.KING: rank_str = "king"
				CardRank.PALADIN: rank_str = "paladin"

			var card_name = rank_str + "_of_" + suit_str
			
			var card = {
				"name": card_name,
				"suit": enum_suit,
				"rank": rank_enum,  # Store the *enum* value
				"value": rank_enum,   # Use the enum value directly!
				"chip_value": rank_enum,  # Use the enum value
				"mult_value": 1, #base is one
				"short_rank": get_short_rank(rank_enum)
				}
			deck.append(card)
			cards[card_name] = card
			
	# DECK HELPER FUNCTIONS
		# GETTING SUIT NAME SHORT OR LONG
func get_suit_name(suit: int, short_form: bool = false) -> String:
	match suit:
		CardSuit.ODESSA:
			return "Odessa" if not short_form else "o"
		CardSuit.GODRIK:
			return "Godrik" if not short_form else "g"
		CardSuit.BAEZEL:
			return "Baezel" if not short_form else "b"
		CardSuit.DRAGONS:
			return "Dragons" if not short_form else "d"
		_:
			push_warning("Invalid suit value: ", suit)
			return "Unknown"

		# FORMAT CARD NAME
func format_card_name(card_name: String, short_suits: bool = false) -> String:
	var card_data = cards[card_name]
	var rank = card_data.rank
	var suit = card_data.suit

	var rank_str = ""
	if short_suits:
		rank_str = card_data.short_rank
	else:
		match rank:
			CardRank.TWO: rank_str = "2"
			CardRank.THREE: rank_str = "3"
			CardRank.FOUR: rank_str = "4"
			CardRank.FIVE: rank_str = "5"
			CardRank.SIX: rank_str = "6"
			CardRank.SEVEN: rank_str = "7"
			CardRank.EIGHT: rank_str = "8"
			CardRank.NINE: rank_str = "9"
			CardRank.TEN: rank_str = "10"
			CardRank.TEMPLAR: rank_str = "Templar"
			CardRank.QUEEN: rank_str = "Queen"
			CardRank.KING: rank_str = "King"
			CardRank.PALADIN: rank_str = "Paladin"

	var suit_name = get_suit_name(suit, short_suits)

	if short_suits:
		return rank_str + suit_name
	else:
		return rank_str + " of " + suit_name
		
		# JUST GRAB SHORT RANK
func get_short_rank(rank:int) -> String:
	match rank:
		CardRank.TWO: return "2"
		CardRank.THREE: return "3"
		CardRank.FOUR: return "4"
		CardRank.FIVE: return "5"
		CardRank.SIX: return "6"
		CardRank.SEVEN: return "7"
		CardRank.EIGHT: return "8"
		CardRank.NINE: return "9"
		CardRank.TEN: return "10"
		CardRank.TEMPLAR: return "T"
		CardRank.QUEEN: return "Q"
		CardRank.KING: return "K"
		CardRank.PALADIN: return "P"
		_:
			push_warning("Invalid Rank: ", rank)
			return "?"
			
	# SHUFFLE DECK
func shuffle_deck():
	deck.shuffle()

# A HARD RESET OF DISCARD PILE; ONLY USE AFTER APPENDING CARDS BACK TO DECK
func reset_discard_pile():
	discard_pile.clear()
	
# HAND FUNCTIONS
	# DEAL PLAYER HAND, AT START OR AFTER DISCARD/PLAY
func deal_hand(hand_size : int):
	player_hand.clear()
	for _i in range(hand_size):
		if deck.size() > 0:
			player_hand.append(deck.pop_back().name)
		else:
			display_message("Deck is empty!\n")
			break # EXIT IF DECK IS EMPTY

	# GENERATE WHAT'S DISPLAYED TO USER
func generate_displayed_hand():
	displayed_hand.clear()
	var sorted_hand = sort_hand_by_rank(player_hand)  # Or sort_hand_by_suit, as needed
	for card_name in sorted_hand:
		# Store BOTH the name and the formatted string.  This is the KEY CHANGE.
		displayed_hand.append([card_name, format_card_name(card_name, use_short_suits)])

	# DRAW CARDS FROM DECK TO HAND
func draw_cards(num_cards):
	for _i in range(num_cards):
		if deck.size() > 0:
			player_hand.append(deck.pop_back().name) #get name
		else:
			display_message("Deck is empty! \n")
			break  # Exit if the deck is empty
	generate_displayed_hand()
	display_hand()

	# SORT HAND BY RANK
func sort_hand_by_rank(hand: Array) -> Array:
	var sortable_hand = []
	for card_name in hand:
		sortable_hand.append([card_name, cards[card_name].value]) # Get value for sorting

	sortable_hand.sort_custom(func(a, b): return a[1] < b[1])

	var sorted_hand = []
	for item in sortable_hand:
		sorted_hand.append(item[0])

	return sorted_hand
	
	# SORT HAND BY SUIT
func sort_hand_by_suit(hand: Array) -> Array:
	var sorted_hand = []
	for card_name in hand:
		sorted_hand.append([card_name, cards[card_name].suit, cards[card_name].value])

	# Sort by suit first, then by rank (value)
	sorted_hand.sort_custom(func(a, b):
		if a[1] == b[1]:  # Same suit: compare ranks
			return a[2] < b[2]
		else:  # Different suits: compare suit enum values
			return a[1] < b[1]
	)

	var to_return = []
	for item in sorted_hand:
		to_return.append(item[0]) #add name
	return to_return
	
# PLAY AND DISCARD FUNCTIONS (IN ROUND)
func play_cards(card_numbers: Array):
	var cards_to_play = []

	for num_str in card_numbers:
		var card_number = int(num_str) - 1
		if card_number >= 0 and card_number < displayed_hand.size():
			cards_to_play.append(displayed_hand[card_number][0])
		else:
			display_message("Invalid card number: " + num_str + "\n")
	
	# FIVE CARD PLAY LIMIT RULE
	if cards_to_play.size() > 5:
		display_message("You can only play up to five cards. \n")
		return
		
	# IN CASE THEY FORGOT TO PICK A CARD
	if cards_to_play.is_empty():
		display_message("No cards selected. Please select a card to play. \n")
		return
	
	# ACTUALLY PLAYING THE HAND
	if cards_to_play.size() > 0:
		if hands > 0:
			var score_this_hand = calculate_score(cards_to_play)
			score += score_this_hand
			display_message("Score: " + str(score) + "\n")
			display_message("Played: " + str(cards_to_play) + ", scoring " + str(score_this_hand) +" points.\n")
			display_message("Total score this round: " + str(score) + ".\n")

			var new_hand = []
			for card_name in player_hand:
				if card_name not in cards_to_play:
					new_hand.append(card_name)
				else:
					discard_pile.append(card_name)
			player_hand = new_hand

			hands -= 1
			display_message("Hands remaining: " + str(hands) + "\n")
			draw_cards(cards_to_play.size())

			prompt = "handplayed"
			waiting = true
		else:
			display_message("No hands remaining!\n")
			waiting = false
			game_state = GameState.LOSE

func discard_cards(card_numbers: Array):
	var cards_to_discard = []

	for num_str in card_numbers:
		var card_number = int(num_str) - 1  # Adjust for 0-indexing
		if card_number >= 0 and card_number < player_hand.size():
			cards_to_discard.append(player_hand[card_number][0])
		else:
			display_message("Invalid card number: " + num_str + "\n")
	
	# IN CASE THEY TRY TO DISCARD MORE THAN 5 CARDS
	if cards_to_discard >= 6:
		display_message("You can only select up to five cards to discard. \n")
		return
		
	if cards_to_discard.size() > 0:
		if discards > 0:
			var new_hand = []
			for card_name in player_hand:
				if card_name not in cards_to_discard:
					new_hand.append(card_name)
				else:
					discard_pile.append(card_name)  # Add to discard pile
			player_hand = new_hand

			discards -= 1
			display_message("Discards remaining: " + str(discards) + "\n")
			draw_cards(cards_to_discard.size())
			generate_displayed_hand()
			display_hand()
		else:
			display_message("No discards remaining!\n")
	else:
		display_message("You have to select cards to discard. \n")
		display_message("Example: discard 1 3 5 \n")
	
# DISPLAY FUNCTIONS
	# DECK
func display_deck():
	if deck.size() > 0:
		display_message("Your current deck: \n")
		for card_dict in deck: #loop through the dictionaries
			display_message(format_card_name(card_dict.name, use_short_suits) + "\n") #format
	else:
		display_message("Your deck is empty!\n")

	# HAND
func display_hand():
	display_message("Your hand: \n")
	var number = 1
	for card_data in displayed_hand: #already formatted
		display_message(str(number) + ": " + card_data[1] + "\n")
		number += 1
		
	# HELP
func display_help():
	display_message("Available commands: \n")
	for command in commands.keys():
		display_message("- " + command + commands[command] + "\n")

	# DISCARD PILE
func display_discard_pile():
	if discard_pile.size() > 0:
		display_message("Cards in discard pile: \n")
		for card_name in discard_pile:
			display_message(format_card_name(card_name, use_short_suits) + "\n")
	else:
		display_message("No cards in discard pile yet. \n")

	# DEFAULT MESSAGE IN TERMINAL
func display_message(message):
	displayed_message.append_text(str(message))
	
# SCALING FUNCTIONS

func calc_round_reward() -> int:
	var reward = round_rewards.get([boss_number, round_number], 0) #get the round or return 0
	reward += (hands * 5)
	reward += (discards * 2)
	return reward
	
func calculate_level_multiplier(hand_type: HandType) -> float:
	if hand_data.has(hand_type):
		var level = hand_data[hand_type]["level"]
		var multiplier = 1.0 + (level - 1) * 0.2  # 20% linear increase
		return multiplier
	else:
		push_error("ERROR: HAND TYPE NOT FOUND IN HAND_DATA.")
		return 1.0
		
func calculate_score_scaling() -> int:
	var base_score = 100
	var scaling_factor = 50
	var score_to_beat = base_score + (round_number - 1) * scaling_factor

	if round_number % 4 == 0:
		# Get the multiplier for the current boss
		var multiplier = boss_data.get(boss_number, {"multiplier": 1.5})["multiplier"]  # Default to 1.5 if not found
		score_to_beat *= multiplier

	return int(score_to_beat)
	
###########################
# HAND SCORE AND ANALYSIS #
###########################

# MAIN ANALYSIS OF HAND
func analyze_hand(played_cards: Array) -> HandType:
	var hand_cards = []
	for card_name in played_cards:
		hand_cards.append(cards[card_name])

	var best_hand_type = HandType.HIGH_CARD  # Start with the lowest possible hand

	# --- Check for hands, considering all combinations ---
	# We use combinations to check all possible subsets of cards.
	# This is the most robust way to find the *best* possible hand.

	for num_cards in range(1, hand_cards.size() + 1): # Check all possible lengths
		for combination in combinations(hand_cards, num_cards): #find combinations
			# Now, check for each hand type, in descending order of rank
			if is_royal_flush(combination):
				best_hand_type = HandType.ROYAL_FLUSH
				return best_hand_type # Return immediately if found
			elif is_straight_flush(combination):
				best_hand_type = max(best_hand_type, HandType.STRAIGHT_FLUSH)
			elif is_flush_five(combination):
				best_hand_type = max(best_hand_type, HandType.FLUSH_FIVE)
			elif is_five_of_a_kind(combination):
				best_hand_type = max(best_hand_type, HandType.FIVE_OF_A_KIND)
			elif is_flush_four(combination):
				best_hand_type = max(best_hand_type, HandType.FLUSH_FOUR)
			elif is_four_of_a_kind(combination):
				best_hand_type = max(best_hand_type, HandType.FOUR_OF_A_KIND)
			elif is_odessas_house(combination):
				best_hand_type = max(best_hand_type, HandType.ODESSAS_HOUSE)
			elif is_baezels_house(combination):
				best_hand_type = max(best_hand_type, HandType.BAEZELS_HOUSE)
			elif is_godriks_house(combination):
				best_hand_type = max(best_hand_type, HandType.GODRIKS_HOUSE)
			elif is_full_house(combination):
				best_hand_type = max(best_hand_type, HandType.FULL_HOUSE)
			elif is_flush(combination):
				best_hand_type = max(best_hand_type, HandType.FLUSH)
			elif is_straight(combination):
				best_hand_type = max(best_hand_type, HandType.STRAIGHT)
			elif is_the_three(combination):
				best_hand_type = max(best_hand_type, HandType.THE_THREE)
			elif is_three_of_a_kind(combination):
				best_hand_type = max(best_hand_type, HandType.THREE_OF_A_KIND)
			elif is_two_pair(combination):
				best_hand_type = max(best_hand_type, HandType.TWO_PAIR)
			elif is_pair(combination):
				best_hand_type = max(best_hand_type, HandType.PAIR)

	return best_hand_type
	
	# HELPER FUNCTION: COMBINATIONS
func combinations(arr: Array, n: int):
	var result = []
	
	if n <= 0:
		return [[]]
	if arr.is_empty():
		return []
	
	var first = arr[0]
	var rest = arr.slice(1)
	
	var combs_without_first = combinations(rest, n)
	for comb in combs_without_first:
		result.append(comb)
		
	var combs_with_first = combinations(rest, n -1)
	for comb in combs_with_first:
		var new_comb = [first]
		new_comb.append_array(comb)
		result.append(new_comb)
	return result
	
# CALCULATE SCORE: TAKES CARDS AND RUNS THROUGH OTHER FUNCS
func calculate_score(played_cards: Array) -> int:
	scored_cards.clear()  # CLEAR SCORED CARDS FROM PREVIOUS
	var hand_type = analyze_hand(played_cards)
	print(hand_type)
	var base_score = 100 # hand_data[hand_type]["base_score"]
	var hand_score = 0

	# CONVERTING INTO DICTIONARIES
	var hand_cards = []
	for card_name in played_cards:
		hand_cards.append(cards[card_name])

# HIGHEST CARD COUNT TO LOWEST
	match hand_type:
		HandType.ROYAL_FLUSH:
			hand_score = calc_royal_flush(hand_cards)
		HandType.STRAIGHT_FLUSH:
			hand_score = calc_straight_flush(hand_cards)
		HandType.FIVE_OF_A_KIND:
			hand_score = calc_five_of_a_kind(hand_cards)
		HandType.FLUSH_FIVE:
			hand_score = calc_flush_five(hand_cards)
		HandType.FOUR_OF_A_KIND:
			hand_score = calc_four_of_a_kind(hand_cards)
		HandType.FLUSH_FOUR:
			hand_score = calc_flush_four(hand_cards)
		HandType.FULL_HOUSE:
			hand_score = calc_full_house(hand_cards)
		HandType.ODESSAS_HOUSE:
			hand_score = calc_odessas_house(hand_cards)
		HandType.BAEZELS_HOUSE:
			hand_score = calc_baezels_house(hand_cards)
		HandType.GODRIKS_HOUSE:
			hand_score = calc_godriks_house(hand_cards)
		HandType.FLUSH:
			hand_score = calc_flush(hand_cards)
		HandType.STRAIGHT:
			hand_score = calc_straight(hand_cards)
		HandType.THE_THREE:
			hand_score = calc_the_three(hand_cards)
		HandType.THREE_OF_A_KIND:
			hand_score = calc_three_of_a_kind(hand_cards)
		HandType.TWO_PAIR:
			hand_score = calc_two_pair(hand_cards)
		HandType.PAIR:
			hand_score = calc_pair(hand_cards)
		HandType.HIGH_CARD:
			hand_score = calc_high_card(hand_cards)
		_:
			push_warning("Unknown hand type: ", hand_type)
			hand_score = 0

	# --- Apply Modifiers (Placeholder - Add your logic here) ---
	# Example: var final_score = hand_score * multiplier + bonus
	var final_score = hand_score + base_score

	return final_score
	
# --- Flush-Related Functions ---

func is_flush(fcards: Array) -> bool:
	if fcards.size() < 5:
		return false
	var first_suit = fcards[0].suit
	for card in fcards:
		if card.suit != first_suit:
			return false
	return true

func calc_flush(fcards: Array) -> int:
	var hand_score = 0
	for card in fcards:
		scored_cards.append(card.name) #append the name
		hand_score += card.chip_value 
		hand_score *= card.mult_value
	return hand_score

func is_flush_five(fcards: Array) -> bool:
	if fcards.size() != 5:  # Must be exactly 5 cards
		return false
	if not is_five_of_a_kind(fcards):
		return false
	return is_flush(fcards) # It is a five of a kind AND a flush

func calc_flush_five(fcards):
	var hand_score = 0
	for card in fcards:
		scored_cards.append(card.name)
		hand_score += card.chip_value 
		hand_score *= card.mult_value
	return hand_score

func is_flush_four(fcards):
	if fcards.size() < 4: #at least four
		return false
	if not is_four_of_a_kind(fcards): #check for 4 of a kind
		return false

	var rank_counts = {}
	for card in cards:
		if rank_counts.has(card.rank):
			rank_counts[card.rank] += 1
		else:
			rank_counts[card.rank] = 1

	var quad_rank = null
	for rank in rank_counts.keys():
		if rank_counts[rank] == 4:
			quad_rank = rank
			break

	var four_cards= []
	for card in fcards:
		if card.rank == quad_rank:
			four_cards.append(card)

	var first_suit = four_cards[0].suit
	for card in four_cards:
		if card.suit != first_suit:
			return false
	return true

func calc_flush_four(fcards):
	var rank_counts = {} #count
	for card in fcards:
		if rank_counts.has(card.rank):
			rank_counts[card.rank] += 1
		else:
			rank_counts[card.rank] = 1

	var quad_rank = null 
	for rank in rank_counts.keys():
		if rank_counts[rank] == 4:
			quad_rank = rank
			break

	var quad_cards = [] 
	for card in fcards:
		if card.rank == quad_rank:
			quad_cards.append(card)

	var hand_score = 0
	for card in quad_cards:
		scored_cards.append(card.name)
		hand_score += card.chip_value 
		hand_score *= card.mult_value

	return hand_score
	

	# STRAIGHT-RELATED FUNCTIONS
func is_straight(fcards: Array) -> bool:
	if fcards.size() != 5:
		return false
	var ranks = []
	for card in fcards:
		ranks.append(card.value)  # Use the numerical 'value' for rank
	ranks.sort()
	for i in range(ranks.size() - 1):
		if ranks[i + 1] != ranks[i] + 1:
			return false
	return true

func calc_straight(fcards: Array) -> int:
	var hand_score = 0
	for card in fcards:
		scored_cards.append(card.name)
		hand_score += card.chip_value 
		hand_score *= card.mult_value
	return hand_score

func is_straight_flush(fcards: Array) -> bool:
	return is_straight(fcards) and is_flush(fcards)

func calc_straight_flush(fcards: Array) -> int:
	var hand_score = 0
	for card in fcards:
		scored_cards.append(card.name)
		hand_score += card.chip_value 
		hand_score *= card.mult_value
	return hand_score

func is_royal_flush(fcards: Array) -> bool:
	if not is_straight_flush(fcards):
		return false
	# Check if the highest card is a Paladin (Ace)
	var ranks = []
	for card in fcards:
		ranks.append(card.value)
	ranks.sort()
	return ranks[4] == CardRank.PALADIN # CHECK TO BE SURE HIGHEST IS PALADIN

func calc_royal_flush(fcards: Array) -> int:
	var hand_score = 0
	for card in fcards:
		scored_cards.append(card.name)
		hand_score += card.chip_value 
		hand_score *= card.mult_value
	return hand_score
	
	# KIND RELATED HANDS
		# HELPER FUNCTION
func count_ranks(fcards: Array) -> Dictionary:
	var rank_counts = {}
	for card in fcards:
		if rank_counts.has(card.rank):
			rank_counts[card.rank] += 1
		else:
			rank_counts[card.rank] = 1
	return rank_counts

func is_pair(fcards: Array) -> bool:
	if fcards.size() < 2: #at least 2
		return false
	var rank_counts = count_ranks(fcards)
	for count in rank_counts.values():
		if count == 2:
			return true
	return false

func calc_pair(fcards: Array) -> int:
	var rank_counts = count_ranks(fcards)
	var pair_rank = null
	for rank in rank_counts.keys():
		if rank_counts[rank] == 2:
			pair_rank = rank
		break

	var hand_score = 0
	for card in fcards:
		if card.rank == pair_rank:
			scored_cards.append(card.name)
			hand_score += card.chip_value 
			hand_score *= card.mult_value
	return hand_score
	
func is_two_pair(fcards: Array) -> bool:
	if fcards.size() < 4: #at least 4
		return false
	var rank_counts = count_ranks(fcards)
	var pair_count = 0
	for count in rank_counts.values():
		if count == 2:
			pair_count += 1
	return pair_count == 2

func calc_two_pair(fcards: Array) -> int:
	var rank_counts = count_ranks(fcards)
	var pair_ranks = []
	for rank in rank_counts.keys():
		if rank_counts[rank] == 2:
			pair_ranks.append(rank)

	if pair_ranks.size() != 2: #make sure
		return 0

	var hand_score = 0 #add score of both
	for card in fcards:
		if card.rank == pair_ranks[0] or card.rank == pair_ranks[1]:
			scored_cards.append(card.name)
			hand_score += card.chip_value 
			hand_score *= card.mult_value
	return hand_score

func is_three_of_a_kind(fcards: Array) -> bool:
	var rank_counts = count_ranks(fcards)
	for count in rank_counts.values():
		if count == 3:
			return true
	return false

func calc_three_of_a_kind(fcards: Array) -> int:
	var rank_counts = count_ranks(fcards)
	var trio_rank = null
	for rank in rank_counts.keys():
		if rank_counts[rank] == 3:
			trio_rank = rank
			break

	var hand_score = 0
	for card in fcards:
		if card.rank == trio_rank:
			scored_cards.append(card.name)
			hand_score += card.chip_value 
			hand_score *= card.mult_value
	return hand_score
			
func is_four_of_a_kind(fcards: Array) -> bool:
	var rank_counts = count_ranks(fcards)
	for count in rank_counts.values():
		if count == 4:
			return true
	return false

func is_five_of_a_kind(fcards: Array) -> bool:
	var rank_counts = count_ranks(fcards)
	for count in rank_counts.values():
		if count == 5:
			return true
	return false

func calc_the_three(fcards: Array) -> int:
	var hand_score = 0
	for card in fcards:
		scored_cards.append(card.name)
		hand_score += card.chip_value 
		hand_score *= card.mult_value 
	return hand_score
	
func is_the_three(fcards: Array) -> bool:
	if fcards.size() < 3:
		return false
	if not is_three_of_a_kind(fcards):
		return false

	var paladin_count = 0
	var suits = []
	for card in fcards:
		if card.rank == CardRank.PALADIN:
			paladin_count += 1
			suits.append(card.suit)
	if paladin_count != 3:
		return false

	suits.sort()  # Ensure consistent order for comparison
	return suits == [CardSuit.BAEZEL, CardSuit.GODRIK, CardSuit.ODESSA]

func calc_four_of_a_kind(fcards: Array) -> int:
	var rank_counts = count_ranks(fcards)
	var quad_rank = null
	for rank in rank_counts.keys():
		if rank_counts[rank] == 4:
			quad_rank = rank
			break

	var hand_score = 0
	for card in fcards:
		if card.rank == quad_rank:
			scored_cards.append(card.name)
			hand_score += card.chip_value 
			hand_score *= card.mult_value
	return hand_score

func calc_five_of_a_kind(fcards: Array) -> int:
	var rank_counts = count_ranks(fcards)
	var five_rank = null
	for rank in rank_counts.keys():
		if rank_counts[rank] == 5:
			five_rank = rank
			break;
	var hand_score = 0
	for card in fcards:
		if card.rank == five_rank:
			scored_cards.append(card.name)
			hand_score += card.chip_value 
			hand_score *= card.mult_value
	return hand_score
	
func is_full_house(fcards: Array) -> bool:
	if fcards.size() != 5:
		return false
	var rank_counts = count_ranks(fcards)
	var has_three = false
	var has_two = false
	for count in rank_counts.values():
		if count == 3:
			has_three = true
		elif count == 2:
			has_two = true
	return has_three and has_two
	
func calc_full_house(fcards: Array) -> int:
	var hand_score = 0
	for card in fcards:
		scored_cards.append(card.name)
		hand_score += card.chip_value 
		hand_score *= card.mult_value
	return hand_score
	
func is_flush_house(fcards: Array) -> bool:
	return fcards.size() == 5 and is_full_house(fcards) and is_flush(fcards)

func is_godriks_house(fcards: Array) -> bool:
	return is_flush_house(fcards) and fcards[0].suit == CardSuit.GODRIK

func is_baezels_house(fcards: Array) -> bool:
	return is_flush_house(fcards) and fcards[0].suit == CardSuit.BAEZEL

func is_odessas_house(fcards: Array) -> bool:
	return is_flush_house(fcards) and fcards[0].suit == CardSuit.ODESSA
	
func calc_godriks_house(fcards: Array) -> int:
	var hand_score = 0
	for card in fcards:
		scored_cards.append(card.name)
		hand_score += card.chip_value 
		hand_score *= card.mult_value
	return hand_score

func calc_baezels_house(fcards: Array) -> int:
	var hand_score = 0
	for card in fcards:
		scored_cards.append(card.name)
		hand_score += card.chip_value 
		hand_score *= card.mult_value
	return hand_score

func calc_odessas_house(fcards: Array) -> int:
	var hand_score = 0
	for card in fcards:
		scored_cards.append(card.name)
		hand_score += card.chip_value 
		hand_score *= card.mult_value
	return hand_score
	
func calc_high_card(fcards: Array) -> int:
	var hand_score = 0
	if fcards.size() > 0:
		var sorted_cards = sort_hand_by_rank([fcards[0].name]) #sort for highest
		var highest_card_name = sorted_cards[sorted_cards.size() -1] #get last
		var highest_card = fcards[0]
		for card in fcards: #find highest in played cards.
			if card.name == highest_card_name:
				highest_card = card
		scored_cards.append(highest_card.name)
		hand_score += highest_card.chip_value 
		hand_score *= highest_card.mult_value
	return hand_score
